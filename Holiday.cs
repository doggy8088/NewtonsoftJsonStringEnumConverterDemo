// Generated by https://quicktype.io

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Holiday
    {
        [JsonProperty("result")]
        public HolidayResult Result { get; set; }
    }

    public partial class HolidayResult
    {
        [JsonProperty("limit")]
        public long Limit { get; set; }

        [JsonProperty("offset")]
        public long Offset { get; set; }

        [JsonProperty("count")]
        public long Count { get; set; }

        [JsonProperty("sort")]
        public string Sort { get; set; }

        [JsonProperty("results")]
        public ResultElement[] Results { get; set; }
    }

    public partial class ResultElement
    {
        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("holidayCategory")]
        public HolidayCategory HolidayCategory { get; set; }

        [JsonProperty("isHoliday")]
        public IsHoliday IsHoliday { get; set; }

        [JsonProperty("date")]
        public string Date { get; set; }

        [JsonProperty("_id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public enum HolidayCategory {
        放假之紀念日及節日,
        [EnumMember(Value = "星期六、星期日")]
        星期六星期日,
        特定節日,
        補假,
        補行上班日,
        調整放假日
    };

    public enum IsHoliday { 否, 是 };

    public partial class Holiday
    {
        public static Holiday FromJson(string json) => JsonConvert.DeserializeObject<Holiday>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Holiday self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                HolidayCategoryConverter.Singleton,
                IsHolidayConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class HolidayCategoryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(HolidayCategory) || t == typeof(HolidayCategory?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "放假之紀念日及節日":
                    return HolidayCategory.放假之紀念日及節日;
                case "星期六、星期日":
                    return HolidayCategory.星期六星期日;
                case "特定節日":
                    return HolidayCategory.特定節日;
                case "補假":
                    return HolidayCategory.補假;
                case "補行上班日":
                    return HolidayCategory.補行上班日;
                case "調整放假日":
                    return HolidayCategory.調整放假日;
            }
            throw new Exception("Cannot unmarshal type HolidayCategory");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (HolidayCategory)untypedValue;
            switch (value)
            {
                case HolidayCategory.放假之紀念日及節日:
                    serializer.Serialize(writer, "放假之紀念日及節日");
                    return;
                case HolidayCategory.星期六星期日:
                    serializer.Serialize(writer, "星期六、星期日");
                    return;
                case HolidayCategory.特定節日:
                    serializer.Serialize(writer, "特定節日");
                    return;
                case HolidayCategory.補假:
                    serializer.Serialize(writer, "補假");
                    return;
                case HolidayCategory.補行上班日:
                    serializer.Serialize(writer, "補行上班日");
                    return;
                case HolidayCategory.調整放假日:
                    serializer.Serialize(writer, "調整放假日");
                    return;
            }
            throw new Exception("Cannot marshal type HolidayCategory");
        }

        public static readonly HolidayCategoryConverter Singleton = new HolidayCategoryConverter();
    }

    internal class IsHolidayConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(IsHoliday) || t == typeof(IsHoliday?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "否":
                    return IsHoliday.否;
                case "是":
                    return IsHoliday.是;
            }
            throw new Exception("Cannot unmarshal type IsHoliday");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (IsHoliday)untypedValue;
            switch (value)
            {
                case IsHoliday.否:
                    serializer.Serialize(writer, "否");
                    return;
                case IsHoliday.是:
                    serializer.Serialize(writer, "是");
                    return;
            }
            throw new Exception("Cannot marshal type IsHoliday");
        }

        public static readonly IsHolidayConverter Singleton = new IsHolidayConverter();
    }
}
